---

---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>TFC 88</title>
		<link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/98mprice/PSone.css@master/PSone.css" />
		<link href="https://fonts.googleapis.com/css2?family=Share+Tech+Mono&display=swap" rel="stylesheet" />
		<link href="https://fonts.cdnfonts.com/css/armygedon" rel="stylesheet"><!-- font-family: 'Armygedon', sans-serif; -->
		<link href="https://fonts.cdnfonts.com/css/esportiva" rel="stylesheet"><!-- font-family: 'Esportiva', sans-serif; --> 
		        
		<style>
			:root {
				--primary: #646cff;
				--primary-hover: #535bf2;
				--bg-dark: #18181b;
				--bg-panel: #232326;
				--text-main: #e5e5e5;
				--text-label: #b3b3b3;
				--slider-bg: #33343a;
				--slider-thumb: #646cff;
				--active-border: #ffd700;
			}
			body {
				font-family: "Final Fantasy Script Collection - Final Fantasy VII", system-ui, sans-serif;
				margin: 0;
				padding: 2rem;
				background: var(--bg-dark);
				color: var(--text-main);
			}

			.header {
				display: flex;
				justify-content: center;
				align-items: flex-end;
				gap: 1rem;
				margin: 1rem 1rem 0;
			}
			.title-container {
				width: 50%;
				display: flex;
				justify-content: flex-start;
				align-items: flex-start;
			}
			.title {
				line-height: 1;
				margin: 0;
				text-align: left;
			}
			.big-title-container {
				display: flex;
				justify-content: flex-end;
				align-items: flex-end;
				gap: 1rem;
				width: 50%;
				margin-bottom: 1rem;
			}
			.big-title-1 {
				font-family: 'Armygedon', sans-serif;
				font-size: 4rem;
				line-height: 100%;	
			}
			.big-title-2 {
				font-family: 'Esportiva', sans-serif;
				font-size: 4rem;
				line-height: 84%;
			}
			.container {
				max-width: 600px;
				margin: 0 auto;
				background-image: linear-gradient(#0D2289, #06093B);
				border: 1px solid #c6c6c6;
				border-radius: 8px;
				box-shadow: inset 0px 0px 2px 2px rgba(0, 0, 0, 0.3);
			}
			.section-title {
				font-size: 1.5rem;
				font-weight: 600;
				margin-bottom: 1rem;
				color: var(--text-main);
				letter-spacing: 1px;
			}
			.panel {
				background: var(--bg-panel);
				border-radius: 18px;
				padding: 1.2rem 1.5rem;
				margin-bottom: 1.5rem;
				box-shadow: 0 2px 8px rgba(0,0,0,0.18);
				text-align: center;
			}
			.slider-label {
				display: flex;
				justify-content: space-between;
				align-items: center;
				color: var(--text-label);
				font-size: 3rem;
				margin-bottom: 0.2rem;
			}
			.slider {
				-webkit-appearance: none;
				width: 100%;
				height: 4px;
				border-radius: 4px;
				background: var(--slider-bg);
				outline: none;
				margin: 0.5rem 0 1.2rem 0;
				position: relative;
				z-index: 1;
				cursor: pointer;
			}
			.slider::-webkit-slider-thumb {
				-webkit-appearance: none;
				appearance: none;
				width: 20px;
				height: 20px;
				border-radius: 50%;
				background: var(--slider-thumb);
				cursor: pointer;
				position: relative;
				z-index: 2;
				transition: transform 0.1s ease;
			}
			.slider::-moz-range-thumb {
				width: 20px;
				height: 20px;
				border-radius: 50%;
				background: var(--slider-thumb);
				cursor: pointer;
				border: none;
				position: relative;
				z-index: 2;
				transition: transform 0.1s ease;
			}
			.slider:focus {
				outline: none;
			}
			.slider:focus::-webkit-slider-thumb {
				box-shadow: 0 0 0 2px rgba(100, 108, 255, 0.3);
				transform: scale(1.1);
			}
			.slider:focus::-moz-range-thumb {
				box-shadow: 0 0 0 2px rgba(100, 108, 255, 0.3);
				transform: scale(1.1);
			}
			.slider:hover::-webkit-slider-thumb {
				transform: scale(1.1);
			}
			.slider:hover::-moz-range-thumb {
				transform: scale(1.1);
			}
			.effect-btn {
				background: var(--bg-panel);
				color: var(--text-main);
				border: none;
				padding: 0.7rem 1.2rem;
				margin: 0.3rem 0.5rem 0.3rem 0;
				border-radius: 12px;
				font-size: 1rem;
				cursor: pointer;
				transition: all 0.2s ease;
				box-shadow: 0 1px 3px rgba(0,0,0,0.12);
			}
			.effect-btn:hover {
				background: var(--primary-hover);
			}
			.effect-btn.active {
				background: var(--primary);
				color: white;
				box-shadow: 0 0 0 2px var(--active-border);
			}
			.btn {
				background: var(--primary);
				color: white;
				border: none;
				padding: 0.7rem 1.2rem;
				margin: 0.3rem 0.5rem 0.3rem 0;
				border-radius: 12px;
				font-size: 1rem;
				cursor: pointer;
				transition: all 0.2s ease;
				box-shadow: 0 1px 3px rgba(0,0,0,0.12);
			}
			.btn:hover {
				background: var(--primary-hover);
			}
			.btn.active {
				background: var(--primary-hover);
				box-shadow: 0 0 0 2px var(--active-border);
			}
			.loop-btn {
				background: var(--bg-panel);
				color: var(--text-main);
				border: none;
				padding: 0.7rem 1.2rem;
				margin: 0.3rem 0.5rem 0.3rem 0;
				border-radius: 12px;
				font-size: 1rem;
				cursor: pointer;
				transition: all 0.2s ease;
				box-shadow: 0 1px 3px rgba(0,0,0,0.12);
			}
			.loop-btn:hover {
				background: var(--primary-hover);
			}
			.loop-btn.active {
				background: var(--primary);
				color: white;
				box-shadow: 0 0 0 2px var(--active-border);
			}
			.modulation-group {
				display: flex;
				gap: 1.5rem;
			}
			.upload-area {
				font-family: 'Share Tech Mono', 'Courier New', Courier, monospace;
				background: linear-gradient(180deg, #d4ff7f 0%, #baff39 100%);
				color: #222;
				border: 20px solid #222;
				border-radius: 6px;
				box-shadow: 0 2px 8px #222a, inset 0 0 8px #fff8;
				padding: 2rem 2rem 4rem;
				text-align: center;
				margin: 0 0 2rem;
				position: relative;
				letter-spacing: 1px;
				font-size: 1.2rem;
				text-shadow: 0 1px 0 #fff8, 0 0 2px #baff39;
				overflow: hidden;
			}
			.progress-container {
				width: 100%;
				height: 4px;
				background: rgba(0, 0, 0, 0.2);
				border-radius: 2px;
				margin: 1rem 0;
				position: relative;
				cursor: pointer;
			}
			.progress-bar {
				height: 100%;
				background: #222;
				border-radius: 2px;
				width: 0%;
				transition: width 0.1s linear;
			}
			.progress-handle {
				width: 12px;
				height: 12px;
				background: #222;
				border-radius: 50%;
				position: absolute;
				top: 50%;
				transform: translate(-50%, -50%);
				left: 0%;
				opacity: 0;
				transition: opacity 0.2s ease;
			}
			.progress-container:hover .progress-handle {
				opacity: 1;
			}
			.tracks-btn, .import-btn {
				position: absolute;
				bottom: 10px;
				right: 10px;
				background: #222;
				color: #baff39;
				border: none;
				padding: 0.5rem 1rem;
				border-radius: 4px;
				font-family: 'Share Tech Mono', monospace;
				cursor: pointer;
				transition: all 0.2s ease;
				text-shadow: none;
			}
			.tracks-btn:hover, .import-btn:hover {
				background: #333;
				transform: scale(1.05);
			}
			.tracks-btn {
				right: 120px;
			}
			.tracks-panel {
				display: none;
				background: var(--bg-panel);
				border-radius: 18px;
				padding: 1.2rem 1.5rem;
				margin-bottom: 1.5rem;
				box-shadow: 0 2px 8px rgba(0,0,0,0.18);
			}
			.tracks-panel.active {
				display: block;
			}
			.track-list {
				display: grid;
				grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
				gap: 1rem;
				margin-top: 1rem;
			}
			.track-item {
				background: var(--bg-dark);
				padding: 1rem;
				border-radius: 8px;
				cursor: pointer;
				transition: all 0.2s ease;
				text-align: left;
			}
			.track-item:hover {
				background: var(--primary);
				transform: translateY(-2px);
			}
			.track-item h3 {
				margin: 0 0 0.5rem 0;
				font-size: 1.4rem;
				font-weight: bold;
				letter-spacing: 0.5px;
			}
			.track-item p {
				margin: 0;
				font-size: 1.1rem;
				color: var(--text-label);
				letter-spacing: 0.3px;
			}
			#uploadText {
				font-weight: bold;
				font-size: 1.3em;
				letter-spacing: 2px;
				text-shadow: none;
			}
			.controls {
				display: grid;
				grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
				gap: 1rem;
				margin: 2rem 0;
			}
			.control-group {
				background: white;
				padding: 1rem;
				border-radius: 8px;
				box-shadow: 0 2px 4px rgba(0,0,0,0.1);
			}
			button {
				background: var(--primary);
				color: white;
				border: none;
				padding: 0.5rem 1rem;
				border-radius: 4px;
				cursor: pointer;
				transition: background 0.3s ease;
			}
			button:hover {
				background: var(--primary-hover);
			}
			.samples {
				display: grid;
				grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
				gap: 1rem;
				margin: 2rem 0;
			}
			.sample {
				background: white;
				padding: 1rem;
				border-radius: 8px;
				box-shadow: 0 2px 4px rgba(0,0,0,0.1);
				cursor: pointer;
				transition: transform 0.2s ease;
			}
			.sample:hover {
				transform: translateY(-2px);
			}
			.keyboard-container {
				display: flex;
				justify-content: center;
				margin: 2rem 0;
				width: 100%;
			}
			.keyboard {
				position: relative;
				height: 300px;
				width: 100%;
				max-width: 900px;
			}
			.key {
				position: absolute;
				top: 0;
				border: 1px solid #222;
				outline: none;
				cursor: pointer;
				z-index: 1;
				transition: background 0.1s;
			}
			.key.white {
				height: 100%;
				width: calc(100% / 11);
				left: calc(var(--i) * (100% / 11));
				background: #fff;
				z-index: 1;
			}
			.key.black {
				height: 66%;
				width: calc(100% / 18);
				left: calc(var(--i) * (100% / 11));
				background: #111;
				z-index: 2;
				margin-left: calc(-0.5 * (100% / 18));
			}
			.key.white:active {
				background: #e0e0e0;
			}
			.key.black:active {
				background: #444;
			}
			.effect-controls {
				margin-top: 1rem;
			}
			@media (max-width: 991px) {
				body {
					padding: 0.25rem;
				}
			}

			@media (max-width: 768px) {
				.header {
					margin-bottom: .5rem !important;
				}
				.title {
					font-size: 1.5rem;
				}
				.big-title-container {
					margin-bottom: 0 !important;
				}
				.big-title-1, .big-title-2 {
					font-size: 3rem;
				}

				.panel {
					padding: 0.8rem 1rem;
					margin-bottom: 1rem;
				}

				.slider-label {
					font-size: 2rem;
				}

				.effect-btn, .btn, .loop-btn {
					padding: 0.5rem 0.8rem;
					font-size: 0.9rem;
					margin: 0.2rem 0.3rem 0.2rem 0;
				}

				.upload-area {
					padding: 1rem 1rem 4rem;
					border-width: 10px;
					font-size: 1rem;
				}

				#uploadText {
					font-size: 1.1em;
				}

				.section-title {
					font-size: 1.2rem;
					margin-bottom: 0.8rem;
				}
				.track-item h3 {
					font-size: 1.2rem;
				}
				.track-item p {
					font-size: 1rem;
				}
			}
			.loop-pads-grid {
				display: grid;
				grid-template-columns: repeat(3, minmax(70px, 1fr));
				grid-template-rows: repeat(3, minmax(70px, 1fr));
				gap: 14px;
				justify-items: stretch;
				align-items: stretch;
				margin: 0;
				padding: 0;
				width: 100%;
				margin-left: auto;
				margin-right: auto;
			}
			.loop-pad {
				width: 100%;
				height: 0;
				padding-bottom: 100%; /* 1:1 aspect ratio */
				background: #18181b;
				border: 3px solid #18181b;
				border-radius: 12px;
				color: #fff;
				font-size: 1.1rem;
				font-family: 'Share Tech Mono', monospace;
				transition: border 0.2s, box-shadow 0.2s, background 0.2s;
				outline: none;
				cursor: pointer;
				margin: 0;
				position: relative;
				overflow: hidden;
			}
			.loop-pad span {
				position: absolute;
				left: 50%;
				top: 50%;
				transform: translate(-50%, -50%);
			}
			.loop-pad:active, .loop-pad.active {
				border: 3px solid #ffd700;
				box-shadow: 0 0 0 3px #ffd700, 0 0 18px #eeff00;
				background: #232326;
			}
			@media (max-width: 480px) {
				.loop-pads-grid {
					max-width: 98vw;
					gap: 8px;
				}
			}
		</style>
	</head>
	<body>
		<div class="container">
			<div class="header">
				<div class="title-container">
					<h1 class="title">Th0th Ferrari<br>Audio Controller</h1>
				</div>
				<div class="big-title-container">
					<span class="big-title-1" style="text-shadow: 4px 4px black">TFC</span>
					<span class="big-title-2" style="text-shadow: 4px 4px black">88</span>
				</div>
			</div>

			<div class="field">
				<div class="upload-area" id="uploadArea">
					<p id="uploadText">IMPORT audio or select from TRACKS below</p>
					<div class="progress-container" id="progressContainer">
						<div class="progress-bar" id="progressBar"></div>
						<div class="progress-handle" id="progressHandle"></div>
					</div>
					<div style="display: flex; justify-content: space-between; align-items: center; margin-top: 0.5em;">
						<div id="timeDisplay" style="font-size: 1em; font-family: 'Share Tech Mono', monospace;">00:00 / 00:00</div>
						<div id="bpmDisplay" style="font-size: 1em;"></div>
					</div>
					<input type="file" id="fileInput" accept="audio/*,.mp3,.wav,.m4a,.aac,.ogg,.webm" style="display: none" />
					<button class="import-btn" id="importBtn">+ IMPORT</button>
					<button class="tracks-btn" id="tracksBtn">♫ TRACKS</button>
				</div>
				<div class="tracks-panel" id="tracksPanel">
					<div class="section-title">PRELOADED TRACKS</div>
					<div class="track-list">
						<div class="track-item" data-track="/samples/WARMTH.m4a">
							<h3>WARMTH.m4a</h3>
							<p>♬♬♬♬</p>
						</div>
						<div class="track-item" data-track="/samples/SEE THRU (0).m4a">
							<h3>SEE THRU (0).m4a</h3>
							<p>♩♩♩♩</p>
						</div>
						<div class="track-item" data-track="/samples/Miles.mp3">
							<h3>Miles.mp3</h3>
							<p>♪♪♪♪</p>
						</div>
						<div class="track-item" data-track="/samples/22TWO22TWO.m4a">
							<h3>22TWO22TWO.m4a</h3>
							<p>♫♫♫♫</p>
						</div>
					</div>
				</div>
			</div>

			<div class="field">
				<div class="section-title">PLAYBACK CONTROLS</div>
				<div class="panel">
					<button class="btn" id="playBtn">Play</button>
					<button class="btn" id="pauseBtn">Pause</button>
					<button class="btn" id="stopBtn">Stop</button>
					<button class="btn" id="loopBtn">Loop</button>
				</div>
			</div>

			<div class="field">
				<div class="section-title">PLAYBACK RATE</div>
				<div class="panel">
					<div class="slider-label">
						<span>Speed + Pitch</span>
					</div>
					<input 
						type="range" 
						class="slider" 
						id="playbackRateSlider" 
						min="0.25" 
						max="4" 
						value="1" 
						step="0.01"
					/>
				</div>
			</div>

			<div class="field">
				<div class="section-title">EFFECTS</div>
				<div class="panel">
					<button class="btn effect-btn" id="reverbBtn">Reverb</button>
					<div class="effect-controls" id="reverbControls" style="display: none;">
						<div class="slider-label"><span>Decay Time</span></div>
						<input type="range" class="slider" id="reverbDecaySlider" min="0.1" max="20" value="3" step="0.1" />
					</div>

					<button class="btn effect-btn" id="delayBtn">Delay</button>
					<div class="effect-controls" id="delayControls" style="display: none;">
						<div class="slider-label"><span>Delay Time</span></div>
						<input type="range" class="slider" id="delayTimeSlider" min="0.1" max="4" value="0.5" step="0.1" />
						<div class="slider-label"><span>Feedback</span></div>
						<input type="range" class="slider" id="delayFeedbackSlider" min="0" max="0.95" value="0.6" step="0.05" />
					</div>

					<button class="btn effect-btn" id="distortionBtn">Distort</button>
					<div class="effect-controls" id="distortionControls" style="display: none;">
						<div class="slider-label"><span>Distortion</span></div>
						<input type="range" class="slider" id="distortionSlider" min="0" max="1" value="0.6" step="0.05" />
					</div>

					<button class="btn effect-btn" id="pitchShiftBtn">Pitch</button>
					<div class="effect-controls" id="pitchShiftControls" style="display: none;">
						<div class="slider-label"><span>Pitch</span></div>
						<input type="range" class="slider" id="pitchShiftSlider" min="-24" max="24" value="0" step="1" />
					</div>
				</div>
			</div>

			<!-- Custom Loop Pads Section -->
			<div class="field">
				<div class="section-title">CUSTOM LOOPS</div>
				<div class="panel">
					<div class="loop-pads-grid">
						<button class="loop-pad" id="pad-1"><span>PAD 1</span></button>
						<button class="loop-pad" id="pad-2"><span>PAD 2</span></button>
						<button class="loop-pad" id="pad-3"><span>PAD 3</span></button>
						<button class="loop-pad" id="pad-4"><span>PAD 4</span></button>
						<button class="loop-pad" id="pad-5"><span>PAD 5</span></button>
						<button class="loop-pad" id="pad-6"><span>PAD 6</span></button>
						<button class="loop-pad" id="pad-7"><span>PAD 7</span></button>
						<button class="loop-pad" id="pad-8"><span>PAD 8</span></button>
						<button class="loop-pad" id="pad-9"><span>PAD 9</span></button>
					</div>
				</div>
			</div>
		</div>

		<script>
			// Wait for the DOM to be fully loaded
			document.addEventListener('DOMContentLoaded', async () => {
				let Tone: any;
				let player: any = null;
				let reverb: any;
				let delay: any;
				let distortion: any;
				let pitchShift: any;
				let isInitialized = false;
				let pausedPosition: number = 0;
				let isPaused: boolean = false;
				let timeUpdateInterval: number | null = null;

				let isReverbOn = false;
				let isDelayOn = false;
				let isDistortionOn = false;
				let isPitchShiftOn = false;

				let detectedBpm: number | null = null;
				const bpmDisplay = document.getElementById('bpmDisplay');
				const timeDisplay = document.getElementById('timeDisplay');

				let playbackStartTimestamp = 0;
				let offsetAtStart = 0;

				// iOS audio handling
				const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !(window as any).MSStream;
				let audioContext: AudioContext | null = null;

				async function checkIOSAudioState() {
					console.log('Checking iOS audio state...');
					if (isIOS) {
						console.log('iOS device detected');
						try {
							// Try to get audio input to check if device is muted
							const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
							const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();
							const analyser = audioContext.createAnalyser();
							const source = audioContext.createMediaStreamSource(stream);
							source.connect(analyser);
							
							// Check if we can get audio data
							const dataArray = new Uint8Array(analyser.frequencyBinCount);
							analyser.getByteFrequencyData(dataArray);
							
							// Stop the stream
							stream.getTracks().forEach(track => track.stop());
							audioContext.close();
							
							// If we get here, audio is working
							const uploadText = document.getElementById('uploadText');
							if (uploadText) {
								uploadText.textContent = 'IMPORT audio or select from TRACKS below';
							}
							return true;
						} catch (error) {
							console.log('Audio check failed:', error);
							// If we get an error, the device is likely muted
							const uploadText = document.getElementById('uploadText');
							if (uploadText) {
								uploadText.textContent = '⚠️ Device is muted. Please unmute to play audio.';
							}
							return false;
						}
					} else {
						console.log('Not an iOS device');
					}
					return true;
				}

				// Add touch event listener to check audio state on first interaction
				document.addEventListener('touchstart', async () => {
					console.log('Touch event detected');
					if (isIOS) {
						console.log('iOS touch detected, checking audio state');
						await checkIOSAudioState();
					}
				}, { once: true });

				// Also check on any click event
				document.addEventListener('click', async () => {
					console.log('Click event detected');
					if (isIOS) {
						console.log('iOS click detected, checking audio state');
						await checkIOSAudioState();
					}
				}, { once: true });

				function formatTime(seconds: number): string {
					const minutes = Math.floor(seconds / 60);
					const remainingSeconds = Math.floor(seconds % 60);
					return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
				}

				function updateTimeDisplay() {
					if (player && timeDisplay && player.buffer) {
						let currentTime = 0;
						if (!isPaused && playbackStartTimestamp) {
							currentTime = (Date.now() - playbackStartTimestamp) / 1000 + offsetAtStart;
							// Check if we've reached the end of the track
							if (currentTime >= player.buffer.duration) {
								currentTime = 0;
								player.stop();
								playbackStartTimestamp = 0;
								offsetAtStart = 0;
								isPaused = false;
								if (playBtn) playBtn.classList.remove('active');
								if (pauseBtn) pauseBtn.classList.remove('active');
								stopTimeUpdate();
							}
						} else {
							currentTime = pausedPosition || 0;
						}
						const duration = player.buffer.duration || 0;
						timeDisplay.textContent = `${formatTime(currentTime)} / ${formatTime(duration)}`;
						
						// Update progress bar
						const progressBar = document.getElementById('progressBar');
						const progressHandle = document.getElementById('progressHandle');
						if (progressBar && progressHandle) {
							const progress = (currentTime / duration) * 100;
							progressBar.style.width = `${progress}%`;
							progressHandle.style.left = `${progress}%`;
						}
					} else if (timeDisplay) {
						timeDisplay.textContent = '00:00 / 00:00';
					}
				}

				function startTimeUpdate() {
					if (timeUpdateInterval) {
						clearInterval(timeUpdateInterval);
					}
					timeUpdateInterval = window.setInterval(updateTimeDisplay, 100);
				}

				function stopTimeUpdate() {
					if (timeUpdateInterval) {
						clearInterval(timeUpdateInterval);
						timeUpdateInterval = null;
					}
				}

				// File upload handling
				const uploadArea = document.getElementById('uploadArea');
				const fileInput = document.getElementById('fileInput') as HTMLInputElement;
				const tracksBtn = document.getElementById('tracksBtn');
				const tracksPanel = document.getElementById('tracksPanel');
				const trackItems = document.querySelectorAll('.track-item');

				if (!uploadArea || !fileInput || !tracksBtn || !tracksPanel) {
					console.error('Required elements not found');
					return;
				}

				// Tracks panel toggle
				tracksBtn.addEventListener('click', (e) => {
					e.stopPropagation(); // Prevent triggering upload area click
					tracksPanel.classList.toggle('active');
				});

				// Handle track selection
				trackItems.forEach(item => {
					item.addEventListener('click', async (e) => {
						e.stopPropagation();
						const trackPath = (item as HTMLElement).dataset.track;
						if (trackPath) {
							await initializeAudio();
							if (player) {
								player.dispose();
							}
							// Create new player with the selected track
							player = new Tone.Player({
								url: trackPath,
								onload: async () => {
									console.log('Track loaded successfully');
									// Update UI to show track is loaded
									const uploadText = document.getElementById('uploadText');
									if (uploadText) {
										uploadText.textContent = `Loaded: ${trackPath.split('/').pop()}`;
									}
									// Ensure audio context is running
									if (Tone.context.state !== 'running') {
										await Tone.start();
									}
									// Now decode and analyze for BPM
									try {
										const { analyze } = await import('web-audio-beat-detector');
										const audioContext = Tone.context.rawContext || Tone.context;
										const response = await fetch(trackPath);
										const arrayBuffer = await response.arrayBuffer();
										audioContext.decodeAudioData(arrayBuffer, async (audioBuffer: AudioBuffer) => {
											try {
												detectedBpm = await analyze(audioBuffer);
												if (bpmDisplay) {
													bpmDisplay.textContent = detectedBpm !== null ? `BPM: ${Math.round(detectedBpm)}` : 'BPM: ?';
												}
											} catch (err) {
												console.error('BPM detection error:', err);
												if (bpmDisplay) bpmDisplay.textContent = 'BPM: ?';
											}
										}, (decodeErr: any) => {
											console.error('decodeAudioData error:', decodeErr);
											if (bpmDisplay) bpmDisplay.textContent = 'BPM: ?';
										});
									} catch (err) {
										console.error('BPM detection setup error:', err);
										if (bpmDisplay) bpmDisplay.textContent = 'BPM: ?';
									}
								},
								onerror: (error: Error) => {
									console.error('Error loading track:', error);
									const uploadText = document.getElementById('uploadText');
									if (uploadText) {
										uploadText.textContent = 'Error loading track. Please try again.';
									}
								}
							}).toDestination();
							// Set volume to maximum
							player.volume.value = 0;
							tracksPanel.classList.remove('active');
						}
					});
				});

				// Make file input visible on mobile devices
				if ('ontouchstart' in window) {
					fileInput.style.display = 'block';
					fileInput.style.width = '100%';
					fileInput.style.height = '100%';
					fileInput.style.position = 'absolute';
					fileInput.style.top = '0';
					fileInput.style.left = '0';
					fileInput.style.opacity = '0';
					fileInput.style.cursor = 'pointer';
				}

				async function initializeAudio() {
					if (isInitialized) return;
					
					try {
						console.log('Initializing audio...');
						// Import Tone.js dynamically
						Tone = await import('tone');
						
						// Check iOS audio state before proceeding
						if (isIOS) {
							console.log('Checking iOS audio state during initialization');
							await checkIOSAudioState();
						}
						
						// Initialize Tone.js with specific settings for mobile
						await Tone.start();
						Tone.setContext(new Tone.Context({
							latencyHint: 'interactive',
							lookAhead: 0.1
						}));
						
						// Create effects
						reverb = new Tone.Reverb({
							decay: 3,
							preDelay: 0.1,
							wet: 0.8
						}).toDestination();
						delay = new Tone.FeedbackDelay({
							delayTime: 0.5,
							feedback: 0.6,
							wet: 0.8
						}).toDestination();
						distortion = new Tone.Distortion({
							distortion: 0.6,
							wet: 0.8
						}).toDestination();
						pitchShift = new Tone.PitchShift({
							pitch: 0,
							wet: 0.8
						}).toDestination();
						
						isInitialized = true;
						console.log('Audio initialized successfully');
					} catch (error) {
						console.error('Error initializing audio:', error);
					}
				}

				// Handle mobile touch events
				uploadArea.addEventListener('touchstart', (e) => {
					uploadArea.style.borderColor = 'var(--primary)';
				}, { passive: true });

				uploadArea.addEventListener('touchend', () => {
					uploadArea.style.borderColor = '#ccc';
				}, { passive: true });

				// Handle click for desktop
				const importBtn = document.getElementById('importBtn');
				importBtn?.addEventListener('click', () => {
					fileInput.click();
				});

				// Handle drag and drop
				uploadArea.addEventListener('dragover', (e: DragEvent) => {
					e.preventDefault();
					uploadArea.style.borderColor = 'var(--primary)';
				});

				uploadArea.addEventListener('dragleave', () => {
					uploadArea.style.borderColor = '#ccc';
				});

				uploadArea.addEventListener('drop', async (e: DragEvent) => {
					e.preventDefault();
					uploadArea.style.borderColor = '#ccc';
					const file = e.dataTransfer?.files[0];
					if (file && file.type.startsWith('audio/')) {
						await initializeAudio();
						handleAudioFile(file);
					}
				});

				fileInput.addEventListener('change', async (e: Event) => {
					const target = e.target as HTMLInputElement;
					const file = target.files?.[0];
					if (file) {
						console.log('File selected:', file.name, file.type);
						await initializeAudio();
						await handleAudioFile(file);
					} else {
						console.log('No file selected');
					}
				});

				async function handleAudioFile(file: File) {
					try {
						console.log('Handling audio file:', file.name, file.type);
						const url = URL.createObjectURL(file);
						if (player) {
							player.dispose();
						}
						// Create new player with mobile-friendly settings
						player = new Tone.Player({
							url: url,
							onload: async () => {
								console.log('Audio file loaded successfully');
								// Update UI to show file is loaded
								const uploadText = document.getElementById('uploadText');
								if (uploadText) {
									uploadText.textContent = `Loaded: ${file.name}`;
								}
								// Ensure audio context is running
								if (Tone.context.state !== 'running') {
									await Tone.start();
								}
								// Connect player to destination
								player.toDestination();
								// Set volume to maximum
								player.volume.value = 0;
								// Update time display with initial values
								updateTimeDisplay();
							},
							onerror: (error: Error) => {
								console.error('Error loading audio file:', error);
								const uploadText = document.getElementById('uploadText');
								if (uploadText) {
									uploadText.textContent = 'Error loading file. Please try again.';
								}
							}
						});
					} catch (error) {
						console.error('Error handling audio file:', error);
						const uploadText = document.getElementById('uploadText');
						if (uploadText) {
							uploadText.textContent = 'Error processing file. Please try again.';
						}
					}
				}

				// Playback controls
				const playBtn = document.getElementById('playBtn');
				const pauseBtn = document.getElementById('pauseBtn');
				const stopBtn = document.getElementById('stopBtn');
				const loopBtn = document.getElementById('loopBtn');
				const playbackRateSlider = document.getElementById('playbackRateSlider') as HTMLInputElement;

				playBtn?.addEventListener('click', async () => {
					if (player) {
						try {
							// Check iOS audio state before playing
							if (isIOS && !(await checkIOSAudioState())) {
								return;
							}

							if (Tone.context.state !== 'running') await Tone.start();
							if (isPaused) {
								await player.start();
								player.seek(pausedPosition);
								playbackStartTimestamp = Date.now();
								offsetAtStart = pausedPosition;
								isPaused = false;
							} else {
								await player.start();
								player.seek(0);
								playbackStartTimestamp = Date.now();
								offsetAtStart = 0;
							}
							if (playBtn) playBtn.classList.add('active');
							if (pauseBtn) pauseBtn.classList.remove('active');
							updateTimeDisplay();
							startTimeUpdate();
						} catch (error) {
							console.error('Error starting playback:', error);
						}
					}
				});

				pauseBtn?.addEventListener('click', async () => {
					if (player) {
						try {
							pausedPosition = (Date.now() - playbackStartTimestamp) / 1000 + offsetAtStart;
							await player.stop();
							isPaused = true;
							if (playBtn) playBtn.classList.remove('active');
							if (pauseBtn) pauseBtn.classList.add('active');
							stopTimeUpdate();
							updateTimeDisplay();
						} catch (error) {
							console.error('Error pausing playback:', error);
						}
					}
				});

				stopBtn?.addEventListener('click', async () => {
					if (player) {
						try {
							await player.stop();
							player.seek(0);
							pausedPosition = 0;
							isPaused = false;
							playbackStartTimestamp = 0;
							offsetAtStart = 0;
							if (playBtn) playBtn.classList.remove('active');
							if (pauseBtn) pauseBtn.classList.remove('active');
							stopTimeUpdate();
							updateTimeDisplay();
						} catch (error) {
							console.error('Error stopping playback:', error);
						}
					}
				});

				loopBtn?.addEventListener('click', () => {
					if (player) {
						player.loop = !player.loop;
						loopBtn.classList.toggle('active');
					}
				});

				// Playback rate control
				playbackRateSlider?.addEventListener('input', (e: Event) => {
					if (player) {
						const rate = parseFloat((e.target as HTMLInputElement).value);
						player.playbackRate = rate;
						if (bpmDisplay && detectedBpm) {
							bpmDisplay.textContent = `BPM: ${Math.round(detectedBpm * rate)}`;
						}
					}
				});

				// Effects controls
				const reverbBtn = document.getElementById('reverbBtn');
				const reverbControls = document.getElementById('reverbControls');
				const delayBtn = document.getElementById('delayBtn');
				const delayControls = document.getElementById('delayControls');
				const distortionBtn = document.getElementById('distortionBtn');
				const distortionControls = document.getElementById('distortionControls');
				const pitchShiftBtn = document.getElementById('pitchShiftBtn');
				const pitchShiftControls = document.getElementById('pitchShiftControls');

				reverbBtn?.addEventListener('click', () => {
					if (player) {
						isReverbOn = !isReverbOn;
						if (isReverbOn) {
							player.connect(reverb);
							reverbBtn.classList.add('active');
							if (reverbControls) reverbControls.style.display = 'block';
						} else {
							player.disconnect(reverb);
							reverbBtn.classList.remove('active');
							if (reverbControls) reverbControls.style.display = 'none';
						}
					}
				});

				delayBtn?.addEventListener('click', () => {
					if (player) {
						isDelayOn = !isDelayOn;
						if (isDelayOn) {
							player.connect(delay);
							delayBtn.classList.add('active');
							if (delayControls) delayControls.style.display = 'block';
						} else {
							player.disconnect(delay);
							delayBtn.classList.remove('active');
							if (delayControls) delayControls.style.display = 'none';
						}
					}
				});

				distortionBtn?.addEventListener('click', () => {
					if (player) {
						isDistortionOn = !isDistortionOn;
						if (isDistortionOn) {
							player.connect(distortion);
							distortionBtn.classList.add('active');
							if (distortionControls) distortionControls.style.display = 'block';
						} else {
							player.disconnect(distortion);
							distortionBtn.classList.remove('active');
							if (distortionControls) distortionControls.style.display = 'none';
						}
					}
				});

				pitchShiftBtn?.addEventListener('click', () => {
					if (player) {
						isPitchShiftOn = !isPitchShiftOn;
						if (isPitchShiftOn) {
							player.connect(pitchShift);
							pitchShiftBtn.classList.add('active');
							if (pitchShiftControls) pitchShiftControls.style.display = 'block';
						} else {
							player.disconnect(pitchShift);
							pitchShiftBtn.classList.remove('active');
							if (pitchShiftControls) pitchShiftControls.style.display = 'none';
						}
					}
				});

				// Effect parameter controls
				const reverbDecaySlider = document.getElementById('reverbDecaySlider') as HTMLInputElement;
				const delayTimeSlider = document.getElementById('delayTimeSlider') as HTMLInputElement;
				const delayFeedbackSlider = document.getElementById('delayFeedbackSlider') as HTMLInputElement;
				const distortionSlider = document.getElementById('distortionSlider') as HTMLInputElement;
				const pitchShiftSlider = document.getElementById('pitchShiftSlider') as HTMLInputElement;

				if (reverbDecaySlider) {
					reverbDecaySlider.addEventListener('input', (e: Event) => {
						const target = e.target as HTMLInputElement;
						reverb.decay = parseFloat(target.value);
					});
				}

				if (delayTimeSlider) {
					delayTimeSlider.addEventListener('input', (e: Event) => {
						const target = e.target as HTMLInputElement;
						delay.delayTime.value = parseFloat(target.value);
					});
				}

				if (delayFeedbackSlider) {
					delayFeedbackSlider.addEventListener('input', (e: Event) => {
						const target = e.target as HTMLInputElement;
						delay.feedback.value = parseFloat(target.value);
					});
				}

				if (distortionSlider) {
					distortionSlider.addEventListener('input', (e: Event) => {
						const target = e.target as HTMLInputElement;
						distortion.distortion = parseFloat(target.value);
					});
				}

				if (pitchShiftSlider) {
					pitchShiftSlider.addEventListener('input', (e: Event) => {
						const target = e.target as HTMLInputElement;
						pitchShift.pitch = parseFloat(target.value);
					});
				}

				// Add progress bar click handling
				const progressContainer = document.getElementById('progressContainer');
				if (progressContainer) {
					let isDragging = false;
					let wasPlaying = false;

					// Function to update audio position based on drag position
					const updateAudioPosition = (clientX: number) => {
						if (player && player.buffer) {
							const rect = progressContainer.getBoundingClientRect();
							const clickPosition = Math.max(0, Math.min(1, (clientX - rect.left) / rect.width));
							const newTime = clickPosition * player.buffer.duration;
							
							if (!isPaused) {
								player.seek(newTime);
								playbackStartTimestamp = Date.now();
								offsetAtStart = newTime;
							} else {
								pausedPosition = newTime;
							}
							updateTimeDisplay();
						}
					};

					// Mouse events for desktop
					progressContainer.addEventListener('mousedown', (e) => {
						isDragging = true;
						wasPlaying = !isPaused;
						if (wasPlaying) {
							player?.stop();
						}
						updateAudioPosition(e.clientX);
					});

					document.addEventListener('mousemove', (e) => {
						if (isDragging) {
							updateAudioPosition(e.clientX);
						}
					});

					document.addEventListener('mouseup', () => {
						if (isDragging) {
							isDragging = false;
							if (wasPlaying) {
								player?.start();
								playbackStartTimestamp = Date.now();
								offsetAtStart = pausedPosition;
							}
						}
					});

					// Touch events for mobile
					progressContainer.addEventListener('touchstart', (e) => {
						isDragging = true;
						wasPlaying = !isPaused;
						if (wasPlaying) {
							player?.stop();
						}
						updateAudioPosition(e.touches[0].clientX);
					}, { passive: true });

					document.addEventListener('touchmove', (e) => {
						if (isDragging) {
							updateAudioPosition(e.touches[0].clientX);
						}
					}, { passive: true });

					document.addEventListener('touchend', () => {
						if (isDragging) {
							isDragging = false;
							if (wasPlaying) {
								player?.start();
								playbackStartTimestamp = Date.now();
								offsetAtStart = pausedPosition;
							}
						}
					});

					// Click handling (for non-drag interactions)
					progressContainer.addEventListener('click', (e) => {
						if (!isDragging) {
							updateAudioPosition(e.clientX);
						}
					});
				}

			});
		</script>
	</body>
</html>


